// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: categories_query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCategories = `-- name: CreateCategories :one
INSERT INTO categories (name, thumbnail, color) VALUES ($1, $2, $3) RETURNING id, name, thumbnail, color, created_at, updated_at
`

type CreateCategoriesParams struct {
	Name      string      `json:"name"`
	Thumbnail pgtype.Text `json:"thumbnail"`
	Color     pgtype.Text `json:"color"`
}

func (q *Queries) CreateCategories(ctx context.Context, arg CreateCategoriesParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategories, arg.Name, arg.Thumbnail, arg.Color)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Thumbnail,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategories = `-- name: DeleteCategories :exec
DELETE FROM categories WHERE id = $1
`

func (q *Queries) DeleteCategories(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCategories, id)
	return err
}

const getSongCategories = `-- name: GetSongCategories :many
SELECT id, name, thumbnail, color, created_at, updated_at FROM categories ORDER BY updated_at DESC
`

func (q *Queries) GetSongCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, getSongCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Thumbnail,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSongInCategory = `-- name: GetSongInCategory :many
SELECT s.id, s.name, s.thumbnail, s.artist_id, s.path, s.lyrics, s.category_id, s.duration, s.release_date, s.created_at, s.updated_at, a.name as artist_name, a.avatar_url
FROM songs s
LEFT JOIN artist a on s.artist_id = a.id
WHERE s.category_id = $1
LIMIT COALESCE($3::int, 50)
OFFSET COALESCE($2::int, 0)
`

type GetSongInCategoryParams struct {
	CategoryID int32 `json:"category_id"`
	Start      int32 `json:"start"`
	Size       int32 `json:"size"`
}

type GetSongInCategoryRow struct {
	ID          int32            `json:"id"`
	Name        string           `json:"name"`
	Thumbnail   pgtype.Text      `json:"thumbnail"`
	ArtistID    int32            `json:"artist_id"`
	Path        pgtype.Text      `json:"path"`
	Lyrics      pgtype.Text      `json:"lyrics"`
	CategoryID  int32            `json:"category_id"`
	Duration    pgtype.Int4      `json:"duration"`
	ReleaseDate pgtype.Timestamp `json:"release_date"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	ArtistName  pgtype.Text      `json:"artist_name"`
	AvatarUrl   pgtype.Text      `json:"avatar_url"`
}

func (q *Queries) GetSongInCategory(ctx context.Context, arg GetSongInCategoryParams) ([]GetSongInCategoryRow, error) {
	rows, err := q.db.Query(ctx, getSongInCategory, arg.CategoryID, arg.Start, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSongInCategoryRow{}
	for rows.Next() {
		var i GetSongInCategoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Thumbnail,
			&i.ArtistID,
			&i.Path,
			&i.Lyrics,
			&i.CategoryID,
			&i.Duration,
			&i.ReleaseDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ArtistName,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategories = `-- name: UpdateCategories :one

UPDATE categories 
SET name = $1, thumbnail = $2, color = $3, updated_at = NOW()
WHERE id = $4
RETURNING id, name, thumbnail, color, created_at, updated_at
`

type UpdateCategoriesParams struct {
	Name      string      `json:"name"`
	Thumbnail pgtype.Text `json:"thumbnail"`
	Color     pgtype.Text `json:"color"`
	ID        int32       `json:"id"`
}

func (q *Queries) UpdateCategories(ctx context.Context, arg UpdateCategoriesParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategories,
		arg.Name,
		arg.Thumbnail,
		arg.Color,
		arg.ID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Thumbnail,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
