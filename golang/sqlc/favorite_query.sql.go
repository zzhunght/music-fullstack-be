// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: favorite_query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addSongToFavorite = `-- name: AddSongToFavorite :exec

INSERT INTO favorite_songs (account_id, song_id)
VALUES ($1::int, $2::int)
`

type AddSongToFavoriteParams struct {
	AccountID int32 `json:"account_id"`
	SongID    int32 `json:"song_id"`
}

func (q *Queries) AddSongToFavorite(ctx context.Context, arg AddSongToFavoriteParams) error {
	_, err := q.db.Exec(ctx, addSongToFavorite, arg.AccountID, arg.SongID)
	return err
}

const checkFavorite = `-- name: CheckFavorite :one
SELECT id FROM favorite_songs
WHERE song_id = $1::int AND account_id = $2::int
`

type CheckFavoriteParams struct {
	SongID    int32 `json:"song_id"`
	AccountID int32 `json:"account_id"`
}

func (q *Queries) CheckFavorite(ctx context.Context, arg CheckFavoriteParams) (int32, error) {
	row := q.db.QueryRow(ctx, checkFavorite, arg.SongID, arg.AccountID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getFavoriteSongs = `-- name: GetFavoriteSongs :many
SELECT s.id, s.name, s.thumbnail, s.artist_id, s.path, s.lyrics, s.category_id, s.duration, s.release_date, s.created_at, s.updated_at, a.name as artist_name, a.avatar_url
FROM favorite_songs fs
INNER JOIN songs s on fs.song_id = s.id
LEFT JOIN artist a on s.artist_id = a.id
WHERE fs.account_id = $1::int
ORDER BY fs.created_at DESC
`

type GetFavoriteSongsRow struct {
	ID          int32            `json:"id"`
	Name        string           `json:"name"`
	Thumbnail   pgtype.Text      `json:"thumbnail"`
	ArtistID    int32            `json:"artist_id"`
	Path        pgtype.Text      `json:"path"`
	Lyrics      pgtype.Text      `json:"lyrics"`
	CategoryID  int32            `json:"category_id"`
	Duration    pgtype.Int4      `json:"duration"`
	ReleaseDate pgtype.Timestamp `json:"release_date"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	ArtistName  pgtype.Text      `json:"artist_name"`
	AvatarUrl   pgtype.Text      `json:"avatar_url"`
}

func (q *Queries) GetFavoriteSongs(ctx context.Context, accountID int32) ([]GetFavoriteSongsRow, error) {
	rows, err := q.db.Query(ctx, getFavoriteSongs, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFavoriteSongsRow{}
	for rows.Next() {
		var i GetFavoriteSongsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Thumbnail,
			&i.ArtistID,
			&i.Path,
			&i.Lyrics,
			&i.CategoryID,
			&i.Duration,
			&i.ReleaseDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ArtistName,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSongFromFavorite = `-- name: RemoveSongFromFavorite :exec

DELETE FROM favorite_songs WHERE account_id =$1::int AND song_id =$2::int
`

type RemoveSongFromFavoriteParams struct {
	AccountID int32 `json:"account_id"`
	SongID    int32 `json:"song_id"`
}

func (q *Queries) RemoveSongFromFavorite(ctx context.Context, arg RemoveSongFromFavoriteParams) error {
	_, err := q.db.Exec(ctx, removeSongFromFavorite, arg.AccountID, arg.SongID)
	return err
}
