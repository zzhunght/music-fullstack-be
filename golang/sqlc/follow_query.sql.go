// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: follow_query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkFollow = `-- name: CheckFollow :one
SELECT id, account_id, artist_id, created_at FROM artist_follow WHERE account_id = $1 and artist_id = $2
`

type CheckFollowParams struct {
	AccountID int32 `json:"account_id"`
	ArtistID  int32 `json:"artist_id"`
}

func (q *Queries) CheckFollow(ctx context.Context, arg CheckFollowParams) (ArtistFollow, error) {
	row := q.db.QueryRow(ctx, checkFollow, arg.AccountID, arg.ArtistID)
	var i ArtistFollow
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ArtistID,
		&i.CreatedAt,
	)
	return i, err
}

const follow = `-- name: Follow :exec
INSERT INTO artist_follow (account_id,artist_id) VALUES ($1,$2)
`

type FollowParams struct {
	AccountID int32 `json:"account_id"`
	ArtistID  int32 `json:"artist_id"`
}

func (q *Queries) Follow(ctx context.Context, arg FollowParams) error {
	_, err := q.db.Exec(ctx, follow, arg.AccountID, arg.ArtistID)
	return err
}

const getFollowedArtist = `-- name: GetFollowedArtist :many

SELECT a.id, a.name, a.avatar_url, a.created_at, a.updated_at,COUNT(af.artist_id) AS follow_count
FROM artist a
INNER JOIN artist_follow af
ON a.id = af.artist_id WHERE af.account_id = $1
GROUP BY a.id
`

type GetFollowedArtistRow struct {
	ID          int32            `json:"id"`
	Name        string           `json:"name"`
	AvatarUrl   pgtype.Text      `json:"avatar_url"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	FollowCount int64            `json:"follow_count"`
}

func (q *Queries) GetFollowedArtist(ctx context.Context, accountID int32) ([]GetFollowedArtistRow, error) {
	rows, err := q.db.Query(ctx, getFollowedArtist, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFollowedArtistRow{}
	for rows.Next() {
		var i GetFollowedArtistRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AvatarUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FollowCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unFollow = `-- name: UnFollow :exec
DELETE FROM artist_follow WHERE account_id = $1 and artist_id = $2
`

type UnFollowParams struct {
	AccountID int32 `json:"account_id"`
	ArtistID  int32 `json:"artist_id"`
}

func (q *Queries) UnFollow(ctx context.Context, arg UnFollowParams) error {
	_, err := q.db.Exec(ctx, unFollow, arg.AccountID, arg.ArtistID)
	return err
}
